"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _ = require(".");
var _context = require("./context");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var _default = _ref => {
  let {
    loading,
    children,
    SkeletonComponent,
    theme = "light",
    layout = [],
    duration = 1300,
    useNativeDriver = false,
    containerStyle,
    animatedConfig = {}
  } = _ref;
  const AnimatedValue = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  const defaultConfigs = {
    toValue: 1,
    duration: 1000,
    useNativeDriver,
    delay: 800
  };
  (0, _react.useEffect)(() => {
    const animation = _reactNative.Animated.loop(_reactNative.Animated.timing(AnimatedValue, {
      ...defaultConfigs,
      ...animatedConfig
    }));
    if (loading) {
      animation.start();
    }
    return () => {
      animation.stop();
    };
  }, [loading]);
  if (!loading) {
    return children;
  }
  const isVisibleCustomSkeleton = SkeletonComponent && (layout.length === 0 || !layout);
  return /*#__PURE__*/_react.default.createElement(_context.ContextSkeletonSimpler.Provider, {
    value: {
      AnimatedValue,
      theme
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [{
      flex: 1
    }, containerStyle ?? {}]
  }, isVisibleCustomSkeleton && /*#__PURE__*/_react.default.createElement(SkeletonComponent, null), !isVisibleCustomSkeleton && getLayout(layout)));
};
exports.default = _default;
const getLayout = function () {
  let layoutConfigs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  if (layoutConfigs.length === 0) return null;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, layoutConfigs.map((stylesLayoutItem, i) => {
    return /*#__PURE__*/_react.default.createElement(_.SkeletonItem, {
      key: i,
      style: stylesLayoutItem
    });
  }));
};
//# sourceMappingURL=SkeletonSimpler.js.map