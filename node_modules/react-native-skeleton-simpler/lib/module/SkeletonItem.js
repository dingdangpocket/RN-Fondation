function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React from "react";
import { ContextSkeletonSimpler } from "./context";
import { useContext, useState } from "react";
import { StyleSheet, View, Animated } from "react-native";
export default (props => {
  const [widthLayout, setWidthLayout] = useState(200);
  const {
    AnimatedValue,
    theme
  } = useContext(ContextSkeletonSimpler);
  const translateX = AnimatedValue.interpolate({
    inputRange: [0, 1],
    outputRange: [-10, widthLayout]
  });
  const styles = useStyles({
    transform: [{
      translateX
    }]
  }, theme);
  return /*#__PURE__*/React.createElement(View, _extends({}, props, {
    style: [styles.containerAnimatedView, props.style ?? {}],
    onLayout: event => setWidthLayout(event.nativeEvent.layout.width ?? 200)
  }), /*#__PURE__*/React.createElement(Animated.View, {
    style: [styles.animatedView, props.stylesAnimatedView ?? {}]
  }));
});
const useStyles = function () {
  let translate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let theme = arguments.length > 1 ? arguments[1] : undefined;
  return StyleSheet.create({
    containerAnimatedView: {
      overflow: "hidden",
      backgroundColor: theme === "dark" ? "#313130" : "#dce7e9"
    },
    animatedView: {
      width: "90%",
      height: "100%",
      opacity: 0.13,
      backgroundColor: "#ffffff",
      ...translate
    }
  });
};
//# sourceMappingURL=SkeletonItem.js.map