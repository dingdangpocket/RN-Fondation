import React, { useEffect, useRef } from "react";
import { Animated, View } from "react-native";
import { SkeletonItem } from ".";
import { ContextSkeletonSimpler } from "./context";
export default (_ref => {
  let {
    loading,
    children,
    SkeletonComponent,
    theme = "light",
    layout = [],
    duration = 1300,
    useNativeDriver = false,
    containerStyle,
    animatedConfig = {}
  } = _ref;
  const AnimatedValue = useRef(new Animated.Value(0)).current;
  const defaultConfigs = {
    toValue: 1,
    duration: 1000,
    useNativeDriver,
    delay: 800
  };
  useEffect(() => {
    const animation = Animated.loop(Animated.timing(AnimatedValue, {
      ...defaultConfigs,
      ...animatedConfig
    }));
    if (loading) {
      animation.start();
    }
    return () => {
      animation.stop();
    };
  }, [loading]);
  if (!loading) {
    return children;
  }
  const isVisibleCustomSkeleton = SkeletonComponent && (layout.length === 0 || !layout);
  return /*#__PURE__*/React.createElement(ContextSkeletonSimpler.Provider, {
    value: {
      AnimatedValue,
      theme
    }
  }, /*#__PURE__*/React.createElement(View, {
    style: [{
      flex: 1
    }, containerStyle ?? {}]
  }, isVisibleCustomSkeleton && /*#__PURE__*/React.createElement(SkeletonComponent, null), !isVisibleCustomSkeleton && getLayout(layout)));
});
const getLayout = function () {
  let layoutConfigs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  if (layoutConfigs.length === 0) return null;
  return /*#__PURE__*/React.createElement(React.Fragment, null, layoutConfigs.map((stylesLayoutItem, i) => {
    return /*#__PURE__*/React.createElement(SkeletonItem, {
      key: i,
      style: stylesLayoutItem
    });
  }));
};
//# sourceMappingURL=SkeletonSimpler.js.map